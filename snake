#include <stdio.h>
#include <stdlib.h>
#include <conio.h>
#include <time.h>
#include <unistd.h>


struct cords
{
    int x;
    int y;
};


int gameOver;
int x,y,foodX, foodY;
int score = 0;
int width = 20;
int height = 20;
int length = 0;
unsigned speed = 0.15;
struct cords array[100];
enum eDirection {STOP = 0, RIGHT, LEFT, UP, DOWN};
enum eDirection dir = STOP;


void Draw()
{
    int flag = 0;
    system("cls");
    for(int i=0; i<width; i++)
    {
        printf("# ");
    }
    printf("\n");

    for(int i=0; i<height; i++)
    {
        for(int j=0; j<=width; j++)
        {
            flag = 0;
            for(int t=0; t<100; t++)
            {
                if(array[t].x == j && array[t].y == i)
                {
                    printf("%s", "S ");
                    flag = 1;
                }
            }
            if(flag == 1) continue;
            if(j==0 || j==width)
            {
                printf("# ");
            }
            else if(j == foodX && i == foodY)
            {
                printf("F ");
            }
            else
            {
                printf("  ");
            }
        }
        printf("\n");
    }


    for(int i=0; i<width; i++)
    {
        printf("# ");
    }
    printf("\n");
    printf("score %d", score);

}

void Setup()
{
    for(int i=0; i<100; i++)
    {
        array[i].x = -1;
        array[i].y = -1;
    }
    srand(time(NULL));
    gameOver = 0;
    x = height / 2;
    y = width / 2;
    array[0].x = x;
    array[0].y = y;
    foodX = rand()%(height-2);
    foodY = rand()%(width-2);
}


// funkcja symuluje ruch weza i stwierdza czy waz nie wszedl w samego siebie (gra zostanie zakonczona)
int move(int direction)
{
    // 0 - left; 1 - right; 2 - up; 3 - down);
    int i=0;
    int tmpx;
    int tmpy;
    int tmp_x, tmp_y;
    while(i<100 && array[i].x > -1)
    {
        if(direction == 0)
        {
            if(i==0)
            {
                tmpx = array[i].x;
                tmpy = array[i].y;
                array[i].x -= 1;
            }
            else
            {
                tmp_x = array[i].x;
                tmp_y = array[i].y;
                array[i].x = tmpx;
                array[i].y = tmpy;
                tmpx = tmp_x;
                tmpy = tmp_y;
            }
        }
        else if(direction == 1)
        {
            if(i==0)
            {
                tmpx = array[i].x;
                tmpy = array[i].y;
                array[i].x += 1;
            }
            else
            {
                tmp_x = array[i].x;
                tmp_y = array[i].y;
                array[i].x = tmpx;
                array[i].y = tmpy;
                tmpx = tmp_x;
                tmpy = tmp_y;
            }
        }
        else if(direction == 2)
        {
            if(i==0)
            {
                tmpx = array[i].x;
                tmpy = array[i].y;
                array[i].y -= 1;
            }
            else
            {
                tmp_x = array[i].x;
                tmp_y = array[i].y;
                array[i].x = tmpx;
                array[i].y = tmpy;
                tmpx = tmp_x;
                tmpy = tmp_y;
            }
        }
        else
        {
            if(i==0)
            {
                tmpx = array[i].x;
                tmpy = array[i].y;
               array[i].y += 1;
            }
            else
            {
                tmp_x = array[i].x;
                tmp_y = array[i].y;
                array[i].x = tmpx;
                array[i].y = tmpy;
                tmpx = tmp_x;
                tmpy = tmp_y;
            }
        }
        i += 1;
    }

    for(int i=0; i<length; i++)
    {
        for(int j=0; j<length; j++)
        {
            if(i != j)
            {
                if(array[i].x == array[j].x && array[i].y == array[j].y) return 1;
            }
        }
    }
    return 0;
}


void logic()
{
    if(dir == LEFT)
    {
        x -= 1;
        gameOver = move(0);
    }
    if(dir == RIGHT)
    {
        x += 1;
        gameOver = move(1);
    }
    if(dir == UP)
    {
        y -= 1;
        gameOver = move(2);
    }
    if(dir == DOWN)
    {
        y += 1;
        gameOver = move(3);
    }
    if(x == foodX && y == foodY)
    {
        int flag = 0;
        speed -= 0.5;
        score += 1;
        length += 1;
        array[length].x = x;
        array[length].y = y;
        foodX = rand()%(height-4)+2;
        foodY = rand()%(width-4)+2;
        for(int i=0; i<length; i++)
        {
            if(foodX == array[i].x && foodY == array[i].y) flag = 1;
        }
        while(flag == 1)
        {
            flag = 0;
            foodX = rand()%(height-4)+2;
            foodY = rand()%(width-4)+2;
            for(int i=0; i<length; i++)
            {
                if(foodX == array[i].x && foodY == array[i].y) flag = 1;
            }
        }
    }
    if(x <=0 || x >= width || y < 0 || y >= height)
    {
        gameOver = 1;
    }
}

void Input()
{
    int ch;
    if(_kbhit())
    {
        ch = _getch();

        if(ch == 119)
        {
            if(dir == DOWN) return;
            dir = UP;
        }
        if(ch == 115)
        {
            if(dir == UP) return;
            dir = DOWN;
        }
        if(ch == 100)
        {
            if(dir == LEFT) return;
            dir = RIGHT;
        }
        if(ch == 97)
        {
            if(dir == RIGHT) return;
            dir = LEFT;
        }
    }
}

int main()
{
    Setup();
    printf("%d, %d \n", foodX, foodY);
    while(gameOver == 0)
    {
        Draw();
        Input();
        logic();
        //sleep(0.1);
        if(gameOver == 1) sleep(2);
    }
    system("cls");
    printf("game over");
    printf("\n");
    printf("score %d", score);

    sleep(10);
}
